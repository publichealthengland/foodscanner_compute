,pipeline,params,best_score,best_params,best_estimator,best_estimator_params,testing_accuracy,testing_conf_matrix
MultinomialNB,"Pipeline(steps=[('preprocessor',
                 ColumnTransformer(transformers=[('text',
                                                  Pipeline(steps=[('tfidf',
                                                                   TfidfVectorizer(ngram_range=(1,
                                                                                                2)))]),
                                                  'text'),
                                                 ('cat',
                                                  Pipeline(steps=[('onehot',
                                                                   OneHotEncoder(handle_unknown='ignore',
                                                                                 sparse=False))]),
                                                  ['category_level_1',
                                                   'category_level_2',
                                                   'storage_env']),
                                                 ('multi_cat',
                                                  Pipeline(steps=[('binarizer',
                                                                   CountVectorizer(analyzer=<class 'set'>))]),
                                                  'cooking_type'),
                                                 ('hash',
                                                  Pipeline(steps=[('hasher',
                                                                   FeatureHasher(alternate_sign=False,
                                                                                 input_type='string',
                                                                                 n_features=10))]),
                                                  'pack_type')])),
                ('classifier', MultinomialNB())])","{'classifier__alpha': [0.001, 0.01, 0.1, 0.3, 0.5, 1]}",0.9991735537190083,{'classifier__alpha': 0.001},"Pipeline(steps=[('preprocessor',
                 ColumnTransformer(transformers=[('text',
                                                  Pipeline(steps=[('tfidf',
                                                                   TfidfVectorizer(ngram_range=(1,
                                                                                                2)))]),
                                                  'text'),
                                                 ('cat',
                                                  Pipeline(steps=[('onehot',
                                                                   OneHotEncoder(handle_unknown='ignore',
                                                                                 sparse=False))]),
                                                  ['category_level_1',
                                                   'category_level_2',
                                                   'storage_env']),
                                                 ('multi_cat',
                                                  Pipeline(steps=[('binarizer',
                                                                   CountVectorizer(analyzer=<class 'set'>))]),
                                                  'cooking_type'),
                                                 ('hash',
                                                  Pipeline(steps=[('hasher',
                                                                   FeatureHasher(alternate_sign=False,
                                                                                 input_type='string',
                                                                                 n_features=10))]),
                                                  'pack_type')])),
                ('classifier', MultinomialNB(alpha=0.001))])","{'alpha': 0.001, 'class_prior': None, 'fit_prior': True}",1.0,"[[[260   0]
  [  0  19]]

 [[ 19   0]
  [  0 260]]]"
LogisticRegression,"Pipeline(steps=[('preprocessor',
                 ColumnTransformer(transformers=[('text',
                                                  Pipeline(steps=[('tfidf',
                                                                   TfidfVectorizer(ngram_range=(1,
                                                                                                2)))]),
                                                  'text'),
                                                 ('cat',
                                                  Pipeline(steps=[('onehot',
                                                                   OneHotEncoder(handle_unknown='ignore',
                                                                                 sparse=False))]),
                                                  ['category_level_1',
                                                   'category_level_2',
                                                   'storage_env']),
                                                 ('multi_cat',
                                                  Pipeline(steps=[('binarizer',
                                                                   CountVectorizer(analyzer=<class 'set'>))]),
                                                  'cooking_type'),
                                                 ('hash',
                                                  Pipeline(steps=[('hasher',
                                                                   FeatureHasher(alternate_sign=False,
                                                                                 input_type='string',
                                                                                 n_features=10))]),
                                                  'pack_type')])),
                ('classifier',
                 LogisticRegression(class_weight='balanced',
                                    multi_class='multinomial', random_state=42,
                                    solver='saga'))])","{'classifier__C': [1, 10, 100]}",0.9777777777777779,{'classifier__C': 1},"Pipeline(steps=[('preprocessor',
                 ColumnTransformer(transformers=[('text',
                                                  Pipeline(steps=[('tfidf',
                                                                   TfidfVectorizer(ngram_range=(1,
                                                                                                2)))]),
                                                  'text'),
                                                 ('cat',
                                                  Pipeline(steps=[('onehot',
                                                                   OneHotEncoder(handle_unknown='ignore',
                                                                                 sparse=False))]),
                                                  ['category_level_1',
                                                   'category_level_2',
                                                   'storage_env']),
                                                 ('multi_cat',
                                                  Pipeline(steps=[('binarizer',
                                                                   CountVectorizer(analyzer=<class 'set'>))]),
                                                  'cooking_type'),
                                                 ('hash',
                                                  Pipeline(steps=[('hasher',
                                                                   FeatureHasher(alternate_sign=False,
                                                                                 input_type='string',
                                                                                 n_features=10))]),
                                                  'pack_type')])),
                ('classifier',
                 LogisticRegression(C=1, class_weight='balanced',
                                    multi_class='multinomial', random_state=42,
                                    solver='saga'))])","{'C': 1, 'class_weight': 'balanced', 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'multinomial', 'n_jobs': None, 'penalty': 'l2', 'random_state': 42, 'solver': 'saga', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}",0.9980769230769231,"[[[259   1]
  [  0  19]]

 [[ 19   0]
  [  1 259]]]"
LinearSVC,"Pipeline(steps=[('preprocessor',
                 ColumnTransformer(transformers=[('text',
                                                  Pipeline(steps=[('tfidf',
                                                                   TfidfVectorizer(ngram_range=(1,
                                                                                                2)))]),
                                                  'text'),
                                                 ('cat',
                                                  Pipeline(steps=[('onehot',
                                                                   OneHotEncoder(handle_unknown='ignore',
                                                                                 sparse=False))]),
                                                  ['category_level_1',
                                                   'category_level_2',
                                                   'storage_env']),
                                                 ('multi_cat',
                                                  Pipeline(steps=[('binarizer',
                                                                   CountVectorizer(analyzer=<class 'set'>))]),
                                                  'cooking_type'),
                                                 ('hash',
                                                  Pipeline(steps=[('hasher',
                                                                   FeatureHasher(alternate_sign=False,
                                                                                 input_type='string',
                                                                                 n_features=10))]),
                                                  'pack_type')])),
                ('classifier',
                 LinearSVC(class_weight='balanced', random_state=42))])","{'classifier__C': [1, 10, 100], 'classifier__dual': [True, False]}",0.9991735537190083,"{'classifier__C': 1, 'classifier__dual': True}","Pipeline(steps=[('preprocessor',
                 ColumnTransformer(transformers=[('text',
                                                  Pipeline(steps=[('tfidf',
                                                                   TfidfVectorizer(ngram_range=(1,
                                                                                                2)))]),
                                                  'text'),
                                                 ('cat',
                                                  Pipeline(steps=[('onehot',
                                                                   OneHotEncoder(handle_unknown='ignore',
                                                                                 sparse=False))]),
                                                  ['category_level_1',
                                                   'category_level_2',
                                                   'storage_env']),
                                                 ('multi_cat',
                                                  Pipeline(steps=[('binarizer',
                                                                   CountVectorizer(analyzer=<class 'set'>))]),
                                                  'cooking_type'),
                                                 ('hash',
                                                  Pipeline(steps=[('hasher',
                                                                   FeatureHasher(alternate_sign=False,
                                                                                 input_type='string',
                                                                                 n_features=10))]),
                                                  'pack_type')])),
                ('classifier',
                 LinearSVC(C=1, class_weight='balanced', random_state=42))])","{'C': 1, 'class_weight': 'balanced', 'dual': True, 'fit_intercept': True, 'intercept_scaling': 1, 'loss': 'squared_hinge', 'max_iter': 1000, 'multi_class': 'ovr', 'penalty': 'l2', 'random_state': 42, 'tol': 0.0001, 'verbose': 0}",0.9980769230769231,"[[[259   1]
  [  0  19]]

 [[ 19   0]
  [  1 259]]]"
RandomForestClassifier,"Pipeline(steps=[('preprocessor',
                 ColumnTransformer(transformers=[('text',
                                                  Pipeline(steps=[('tfidf',
                                                                   TfidfVectorizer(ngram_range=(1,
                                                                                                2)))]),
                                                  'text'),
                                                 ('cat',
                                                  Pipeline(steps=[('onehot',
                                                                   OneHotEncoder(handle_unknown='ignore',
                                                                                 sparse=False))]),
                                                  ['category_level_1',
                                                   'category_level_2',
                                                   'storage_env']),
                                                 ('multi_cat',
                                                  Pipeline(steps=[('binarizer',
                                                                   CountVectorizer(analyzer=<class 'set'>))]),
                                                  'cooking_type'),
                                                 ('hash',
                                                  Pipeline(steps=[('hasher',
                                                                   FeatureHasher(alternate_sign=False,
                                                                                 input_type='string',
                                                                                 n_features=10))]),
                                                  'pack_type')])),
                ('classifier',
                 RandomForestClassifier(class_weight='balanced',
                                        max_features='sqrt', oob_score=True,
                                        random_state=42))])","{'classifier__criterion': ['gini', 'entropy'], 'classifier__max_depth': [4, 5, 6], 'classifier__n_estimators': [100, 200, 400]}",0.9769513314967859,"{'classifier__criterion': 'gini', 'classifier__max_depth': 4, 'classifier__n_estimators': 200}","Pipeline(steps=[('preprocessor',
                 ColumnTransformer(transformers=[('text',
                                                  Pipeline(steps=[('tfidf',
                                                                   TfidfVectorizer(ngram_range=(1,
                                                                                                2)))]),
                                                  'text'),
                                                 ('cat',
                                                  Pipeline(steps=[('onehot',
                                                                   OneHotEncoder(handle_unknown='ignore',
                                                                                 sparse=False))]),
                                                  ['category_level_1',
                                                   'category_level_2',
                                                   'storage_env']),
                                                 ('multi_cat',
                                                  Pipeline(steps=[('binarizer',
                                                                   CountVectorizer(analyzer=<class 'set'>))]),
                                                  'cooking_type'),
                                                 ('hash',
                                                  Pipeline(steps=[('hasher',
                                                                   FeatureHasher(alternate_sign=False,
                                                                                 input_type='string',
                                                                                 n_features=10))]),
                                                  'pack_type')])),
                ('classifier',
                 RandomForestClassifier(class_weight='balanced', max_depth=4,
                                        max_features='sqrt', n_estimators=200,
                                        oob_score=True, random_state=42))])","{'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 4, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_impurity_split': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 200, 'n_jobs': None, 'oob_score': True, 'random_state': 42, 'verbose': 0, 'warm_start': False}",0.9980769230769231,"[[[259   1]
  [  0  19]]

 [[ 19   0]
  [  1 259]]]"
XGBClassifier,"Pipeline(steps=[('preprocessor',
                 ColumnTransformer(transformers=[('text',
                                                  Pipeline(steps=[('tfidf',
                                                                   TfidfVectorizer(ngram_range=(1,
                                                                                                2)))]),
                                                  'text'),
                                                 ('cat',
                                                  Pipeline(steps=[('onehot',
                                                                   OneHotEncoder(handle_unknown='ignore',
                                                                                 sparse=False))]),
                                                  ['category_level_1',
                                                   'category_level_2',
                                                   'storage_env']),
                                                 ('multi_cat',
                                                  Pipeline(steps=[('binarizer',
                                                                   CountVectorizer(analyz...
                               max_delta_step=None, max_depth=None,
                               min_child_weight=None, missing=nan,
                               monotone_constraints=None, n_estimators=100,
                               n_jobs=None, num_class=2, num_parallel_tree=None,
                               objective='multi:softmax', random_state=42,
                               reg_alpha=None, reg_lambda=None,
                               sampling_method='uniform', scale_pos_weight=None,
                               subsample=None, tree_method=None,
                               validate_parameters=None, verbosity=None))])","{'classifier__learning_rate': [0.1, 0.3], 'classifier__subsample': [0.7, 0.9], 'classifier__colsample_bytree': [0.7, 0.9], 'classifier__max_depth': [3, 4], 'classifier__n_estimators': [100, 200, 400]}",0.9991735537190083,"{'classifier__colsample_bytree': 0.7, 'classifier__learning_rate': 0.1, 'classifier__max_depth': 3, 'classifier__n_estimators': 100, 'classifier__subsample': 0.7}","Pipeline(steps=[('preprocessor',
                 ColumnTransformer(transformers=[('text',
                                                  Pipeline(steps=[('tfidf',
                                                                   TfidfVectorizer(ngram_range=(1,
                                                                                                2)))]),
                                                  'text'),
                                                 ('cat',
                                                  Pipeline(steps=[('onehot',
                                                                   OneHotEncoder(handle_unknown='ignore',
                                                                                 sparse=False))]),
                                                  ['category_level_1',
                                                   'category_level_2',
                                                   'storage_env']),
                                                 ('multi_cat',
                                                  Pipeline(steps=[('binarizer',
                                                                   CountVectorizer(analyz...
                               interaction_constraints='', learning_rate=0.1,
                               max_delta_step=0, max_depth=3,
                               min_child_weight=1, missing=nan,
                               monotone_constraints='()', n_estimators=100,
                               n_jobs=0, num_class=2, num_parallel_tree=1,
                               objective='multi:softmax', random_state=42,
                               reg_alpha=0, reg_lambda=1,
                               sampling_method='uniform', scale_pos_weight=None,
                               subsample=0.7, tree_method='exact',
                               validate_parameters=1, verbosity=None))])","{'objective': 'multi:softmax', 'base_score': 0.5, 'booster': 'gbtree', 'colsample_bylevel': 1, 'colsample_bynode': 1, 'colsample_bytree': 0.7, 'gamma': 0, 'gpu_id': -1, 'importance_type': 'gain', 'interaction_constraints': '', 'learning_rate': 0.1, 'max_delta_step': 0, 'max_depth': 3, 'min_child_weight': 1, 'missing': nan, 'monotone_constraints': '()', 'n_estimators': 100, 'n_jobs': 0, 'num_parallel_tree': 1, 'random_state': 42, 'reg_alpha': 0, 'reg_lambda': 1, 'scale_pos_weight': None, 'subsample': 0.7, 'tree_method': 'exact', 'validate_parameters': 1, 'verbosity': None, 'sampling_method': 'uniform', 'num_class': 2}",0.9961538461538462,"[[[258   2]
  [  0  19]]

 [[ 19   0]
  [  2 258]]]"
VotingClassifier,,,1.0,,,,0.9980769230769231,"[[[259   1]
  [  0  19]]

 [[ 19   0]
  [  1 259]]]"
